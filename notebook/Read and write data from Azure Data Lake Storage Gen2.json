{
	"name": "Read and write data from Azure Data Lake Storage Gen2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"targetSparkConfiguration": {
			"referenceName": "spark_loganalytics_conf",
			"type": "SparkConfigurationReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9ab595a5-3b02-429c-a5ed-e1290efe81d6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/da8f85bb-b915-4ec0-9d86-578621df7e56/resourceGroups/Synapse/providers/Microsoft.Synapse/workspaces/wsmarc/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://wsmarc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30,
			"targetSparkConfiguration": "spark_loganalytics_conf"
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Access data on Azure Data Lake Storage Gen2 (ADLS Gen2) with Synapse Spark\n",
					"\n",
					"Azure Data Lake Storage Gen2 (ADLS Gen2) is used as the storage account associated with a Synapse workspace. A synapse workspace can have a default ADLS Gen2 storage account and additional linked storage accounts. \n",
					"\n",
					"You can access data on ADLS Gen2 with Synapse Spark via following URL:\n",
					"    \n",
					"    abfss:/staging@asadatalakemarchadjeje.dfs.core.windows.net/staging\n",
					"\n",
					"This notebook provides examples of how to read data from ADLS Gen2 account into a Spark context and how to write the output of Spark jobs directly into an ADLS Gen2 location.\n",
					"\n",
					"## Pre-requisites\n",
					"Synapse leverage AAD pass-through to access any ADLS Gen2 account (or folder) to which you have a **Blob Storage Contributor** permission. No credentials or access token is required. "
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load a sample data\n",
					"\n",
					"Let's first load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets as a sample."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// set blob storage account connection for open dataset\n",
					"\n",
					"val hol_blob_account_name = \"azureopendatastorage\"\n",
					"val hol_blob_container_name = \"holidaydatacontainer\"\n",
					"val hol_blob_relative_path = \"Processed\"\n",
					"val hol_blob_sas_token = \"\"\n",
					"\n",
					"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$hol_blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\n",
					"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$hol_blob_account_name.blob.core.windows.net\",hol_blob_sas_token)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"// load the sample data as a Spark DataFrame\n",
					"val hol_df = spark.read.parquet(hol_wasbs_path) \n",
					"hol_df.show(5, truncate = false)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write data to the default ADLS Gen2 storage\n",
					"\n",
					"We are going to write the spark dateframe to your default ADLS Gen2 storage account.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// set your storage account connection\n",
					"\n",
					"val account_name = \"replace with your blob name\" // replace with your blob name\n",
					"val container_name = \"replace with your container name\" //replace with your container name\n",
					"val relative_path = \"replace with your relative folder path\" //replace with your relative folder path\n",
					"\n",
					"val adls_path = f\"abfss://$container_name@$account_name.dfs.core.windows.net/$relative_path\""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as Parquet, JSON or CSV\n",
					"If you have a dataframe, you can save it to Parquet or JSON with the .write.parquet(), .write.json() and .write.csv() methods respectively.\n",
					"\n",
					"Dataframes can be saved in any format, regardless of the input format.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// set the path for the output file\n",
					"\n",
					"val parquet_path = adls_path + \"holiday.parquet\"\n",
					"val json_path = adls_path + \"holiday.json\"\n",
					"val csv_path = adls_path + \"holiday.csv\""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.sql.SaveMode\n",
					"\n",
					"hol_df.write.mode(SaveMode.Overwrite).parquet(parquet_path)\n",
					"hol_df.write.mode(SaveMode.Overwrite).json(json_path)\n",
					"hol_df.write.mode(SaveMode.Overwrite).option(\"header\", \"true\").csv(csv_path)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as text files\n",
					"If you have a dataframe that you want ot save as text file, you must first covert it to an RDD and then save that RDD as a text file.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// Define the text file path and covert spark dataframe into RDD\n",
					"val text_path = adls_path + \"holiday.txt\"\n",
					"val hol_RDD = hol_df.rdd"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// Save RDD as text file\n",
					"hol_RDD.saveAsTextFile(text_path)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Read data from the default ADLS Gen2 storage\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from parquet files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df_parquet = spark.read.parquet(parquet_path)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from JSON files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df_json = spark.read.json(json_path)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from CSV files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df_csv = spark.read.option(\"header\", \"true\").csv(csv_path)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create an RDD from text file\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val text = sc.textFile(text_path)"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"text.take(5).foreach(println)"
				]
			}
		]
	}
}